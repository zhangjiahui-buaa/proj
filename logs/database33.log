--java.lang.AssertionError: SELECT ALL vt1.c0 FROM vt1, t0 GROUP BY vt1.c0;
--SELECT ALL vt1.c0 FROM vt1, t0 NOT INDEXED GROUP BY vt1.c0 HAVING t0.c0 UNION ALL SELECT vt1.c0 FROM vt1, t0 GROUP BY vt1.c0 HAVING (NOT (t0.c0)) UNION ALL SELECT ALL vt1.c0 FROM vt1, t0 GROUP BY vt1.c0 HAVING ((t0.c0) ISNULL);
--	at sqlancer.sqlite3.oracle.tlp.SQLite3TLPHavingOracle.check(SQLite3TLPHavingOracle.java:85)
--	at sqlancer.common.oracle.CompositeTestOracle.check(CompositeTestOracle.java:22)
--	at sqlancer.ProviderAdapter.generateAndTestDatabase(ProviderAdapter.java:61)
--	at sqlancer.Main$DBMSExecutor.run(Main.java:364)
--	at sqlancer.Main$2.run(Main.java:559)
--	at sqlancer.Main$2.runThread(Main.java:541)
--	at sqlancer.Main$2.run(Main.java:532)
--	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
--	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
--	at java.base/java.lang.Thread.run(Thread.java:1623)
---- Time: 2023/05/28 07:23:51
-- Database: database33
-- Database version: 3.40.0
-- seed value: 1685214884995
PRAGMA cache_size = 50000;
PRAGMA temp_store=MEMORY;
PRAGMA synchronous=off;
CREATE TABLE t0 (c0 REAL NOT NULL ON CONFLICT REPLACE PRIMARY KEY CHECK ( ((((((((((((((c0)OR(c1)))AND(c1)))OR(c2)))OR(c2)))AND(c2)))OR(c1)))>(0X6b01ef43))) UNIQUE COLLATE NOCASE , c1 INT , c2 INTEGER );
CREATE VIRTUAL TABLE vt1 USING fts5(c0, c1);
COMMIT TRANSACTION;
ANALYZE main;
ROLLBACK TRANSACTION;
ROLLBACK TRANSACTION;
UPDATE OR IGNORE vt1 SET (c1, c0)=(NULL, 1795288899) WHERE x'cd35';
INSERT INTO vt1(vt1, rank) VALUES('rank', 'bm25(10.0, 5.0)');
PRAGMA cache_size;
INSERT OR IGNORE INTO vt1(c1, c0) VALUES (NULL, x'8787'), (x'af19', 'B|'), (222414898, 0.3850822521093965);
ANALYZE;
INSERT OR IGNORE INTO vt1 VALUES (NULL, '');
PRAGMA wal_autocheckpoint = 8310046762733124169;
INSERT INTO vt1(vt1) VALUES('automerge=10');
INSERT INTO vt1(vt1) VALUES('integrity-check');
PRAGMA main.wal_autocheckpoint = 1442149036123643212;
ANALYZE vt1;
BEGIN  TRANSACTION;
COMMIT TRANSACTION;
BEGIN  TRANSACTION;
INSERT OR ABORT INTO t0(c2) VALUES (0.3850822521093965), ('<3j#'), (0X25bde412);
INSERT OR IGNORE INTO vt1 VALUES ('0.3850822521093965', x'');
REINDEX NOCASE;
UPDATE t0 SET c1=NULL, c0=x'' WHERE UPPER(0x6709f389);
END;
INSERT INTO vt1(vt1) VALUES('merge=183641983,13');\n;
INSERT INTO vt1(vt1, rank) VALUES('usermerge', 7);
INSERT INTO vt1(vt1, rank) VALUES('crisismerge', 1666686249);
END;
INSERT OR IGNORE INTO vt1(c0) VALUES ('-2098564933');
UPDATE OR IGNORE vt1 SET (c0)=('1728705417');
REINDEX;
INSERT OR IGNORE INTO t0(c0) VALUES ('');
UPDATE OR IGNORE t0 SET (c2)=(NULL) WHERE (+ ((t0.c1 IN ())));
INSERT OR REPLACE INTO vt1(c1) VALUES ('');
UPDATE OR IGNORE t0 SET c0=NULL WHERE (+ (((((((((t0.c2)OR('(,aydLS')))AND(t0.c0)))AND(t0.c1)))OR(t0.c0))));
COMMIT TRANSACTION;
INSERT OR IGNORE INTO vt1(c0, c1) VALUES ('(,aydls', x'');
BEGIN DEFERRED TRANSACTION;
DELETE FROM sqlite_stat1;
REINDEX  vt1;
ANALYZE vt1;
ANALYZE;
INSERT OR IGNORE INTO t0(c0, c2) VALUES (NULL, 't-CSKm');
END TRANSACTION;
REINDEX NOCASE;
UPDATE OR ROLLBACK vt1 SET c0=0xffffffffd7993f65 WHERE (((((vt1.c1)AND(vt1.c1)))AND('J]')) IN ());
UPDATE OR IGNORE t0 SET (c1, c0)=('-1078384152', NULL) WHERE HEX(((t0.c0)!=(t0.c2)));
ANALYZE temp;
INSERT OR ABORT INTO vt1(c1, c0) VALUES ('-1851129110', '(,aydLS'), (x'ae62', x''), ('F{}rm', '183641983');
VACUUM main;
END;
DELETE FROM sqlite_stat1;
INSERT OR ABORT INTO t0(c0) VALUES (0xffffffff82ea70bb);
END;
UPDATE OR ROLLBACK vt1 SET (c0, c0)=(x'', x'd1c0') WHERE ((CASE WHEN vt1.c0 THEN vt1.c0 ELSE vt1.c0 END)IS(((vt1.c1)/(vt1.c0))));
INSERT INTO vt1(vt1) VALUES('rebuild');
REINDEX;
ROLLBACK TRANSACTION;
BEGIN  TRANSACTION;
BEGIN EXCLUSIVE TRANSACTION;
UPDATE OR IGNORE vt1 SET (c0)=('-1336004132') WHERE vt1.c1;
INSERT OR ROLLBACK INTO vt1(c1) VALUES (x'');
COMMIT TRANSACTION;
VACUUM temp;
INSERT OR FAIL INTO t0(c0, c1) VALUES (NULL, NULL);
INSERT OR ROLLBACK INTO t0(c2) VALUES (0Xffffffffce7579ad);
INSERT OR IGNORE INTO t0(c0, c1) VALUES (x'9cd4', 0.5358856516577953);
ANALYZE;
COMMIT TRANSACTION;
ROLLBACK TRANSACTION;
